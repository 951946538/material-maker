[gd_scene load_steps=11 format=2]

[ext_resource path="res://start.gd" type="Script" id=1]
[ext_resource path="res://material_maker/fonts/vegur_regular.otf" type="DynamicFontData" id=2]
[ext_resource path="res://material_maker/icons/godot_logo.svg" type="Texture" id=3]
[ext_resource path="res://icon.png" type="Texture" id=4]

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;
render_mode blend_add;

uniform vec2 canvas_size;

varying float elapsed_time;

void vertex() {
	elapsed_time = TIME;
	UV = VERTEX/canvas_size;
}

//---

float rand(vec2 x) {
    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);
}

vec2 rand2(vec2 x) {
    return fract(cos(mod(vec2(dot(x, vec2(13.9898, 8.141)),
						      dot(x, vec2(3.4562, 17.398))), vec2(3.14))) * 43758.5453);
}

vec3 rand3(vec2 x) {
    return fract(cos(mod(vec3(dot(x, vec2(13.9898, 8.141)),
							  dot(x, vec2(3.4562, 17.398)),
                              dot(x, vec2(13.254, 5.867))), vec3(3.14))) * 43758.5453);
}

vec3 rgb2hsv(vec3 c) {
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);
	vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

const float o16291_ratio = 1.65; // {default:0.5, label:Aspect ratio, max:1, min:0, name:ratio, step:0.01, type:named_parameter}
float perlin(vec2 uv, vec2 size, int iterations, float persistence, int seed) {
	vec2 seed2 = rand2(vec2(float(seed), 1.0-float(seed)));
    float rv = 0.0;
    float coef = 1.0;
    float acc = 0.0;
    for (int i = 0; i < iterations; ++i) {
    	vec2 step = vec2(1.0)/size;
		vec2 xy = floor(uv*size);
        float f0 = rand(seed2+mod(xy, size));
        float f1 = rand(seed2+mod(xy+vec2(1.0, 0.0), size));
        float f2 = rand(seed2+mod(xy+vec2(0.0, 1.0), size));
        float f3 = rand(seed2+mod(xy+vec2(1.0, 1.0), size));
        vec2 mixval = smoothstep(0.0, 1.0, fract(uv*size));
        rv += coef * mix(mix(f0, f1, mixval.x), mix(f2, f3, mixval.x), mixval.y);
        acc += coef;
        size *= 2.0;
        coef *= persistence;
    }
    
    return rv / acc;
}
vec2 transform2_clamp(vec2 uv) {
	return clamp(uv, vec2(0.0), vec2(1.0));
}

vec2 transform2(vec2 uv, vec2 translate, float rotate, vec2 scale) {
 	vec2 rv;
	uv -= translate;
	uv -= vec2(0.5);
	rv.x = cos(rotate)*uv.x + sin(rotate)*uv.y;
	rv.y = -sin(rotate)*uv.x + cos(rotate)*uv.y;
	rv /= scale;
	rv += vec2(0.5);
	return rv;	
}

float shape_circle(vec2 uv, float sides, float size, float edge) {
    uv = 2.0*uv-1.0;
	edge = max(edge, 1.0e-8);
    float distance = length(uv);
    return clamp((1.0-distance/size)/edge, 0.0, 1.0);
}

float shape_polygon(vec2 uv, float sides, float size, float edge) {
    uv = 2.0*uv-1.0;
	edge = max(edge, 1.0e-8);
    float angle = atan(uv.x, uv.y)+3.14159265359;
    float slice = 6.28318530718/sides;
    return clamp((1.0-(cos(floor(0.5+angle/slice)*slice-angle)*length(uv))/size)/edge, 0.0, 1.0);
}

float shape_star(vec2 uv, float sides, float size, float edge) {
    uv = 2.0*uv-1.0;
	edge = max(edge, 1.0e-8);
    float angle = atan(uv.x, uv.y);
    float slice = 6.28318530718/sides;
    return clamp((1.0-(cos(floor(angle*sides/6.28318530718-0.5+2.0*step(fract(angle*sides/6.28318530718), 0.5))*slice-angle)*length(uv))/size)/edge, 0.0, 1.0);
}

float shape_curved_star(vec2 uv, float sides, float size, float edge) {
    uv = 2.0*uv-1.0;
	edge = max(edge, 1.0e-8);
    float angle = 2.0*(atan(uv.x, uv.y)+3.14159265359);
    float slice = 6.28318530718/sides;
    return clamp((1.0-cos(floor(0.5+0.5*angle/slice)*2.0*slice-angle)*length(uv)/size)/edge, 0.0, 1.0);
}

float shape_rays(vec2 uv, float sides, float size, float edge) {
    uv = 2.0*uv-1.0;
	edge = 0.5*max(edge, 1.0e-8)*size;
	float slice = 6.28318530718/sides;
    float angle = mod(atan(uv.x, uv.y)+3.14159265359, slice)/slice;
    return clamp(min((size-angle)/edge, angle/edge), 0.0, 1.0);
}

vec2 uvmirror_h(vec2 uv, float offset) {
	return vec2(max(0, abs(uv.x-0.5)-0.5*offset)+0.5, uv.y);
}
vec2 uvmirror_v(vec2 uv, float offset) {
	return vec2(uv.x, max(0, abs(uv.y-0.5)-0.5*offset)+0.5);
}vec2 rotate(vec2 uv, vec2 center, float rotate) {
 	vec2 rv;
	uv -= center;
	rv.x = cos(rotate)*uv.x + sin(rotate)*uv.y;
	rv.y = -sin(rotate)*uv.x + cos(rotate)*uv.y;
	rv += center;
    return rv;	
}vec2 scale(vec2 uv, vec2 center, vec2 scale) {
	uv -= center;
	uv /= scale;
	uv += center;
    return uv;
}const float p_o16290_cx = 0.000000000;
const float p_o16290_cy = 0.000000000;
const float p_o16290_scale_x = 1.000000000;
const float p_o16284_translate_x = 0.020000000;
const float p_o16284_translate_y = 0.020000000;
const float p_o16284_rotate = 0.000000000;
const float p_o16284_scale_x = 1.000000000;
const float p_o16284_scale_y = 1.000000000;
const float p_o16286_translate_y = 0.000000000;
const float p_o16286_rotate = 0.000000000;
const float p_o16286_scale_x = 1.000000000;
const float p_o16286_scale_y = 1.000000000;
const int seed_o16285 = -24576;
const float p_o16285_scale_x = 4.000000000;
const float p_o16285_scale_y = 4.000000000;
const float p_o16285_iterations = 5.000000000;
const float p_o16285_persistence = 0.750000000;
const int seed_o16283 = -9859;
const float p_o16283_tx = 8.000000000;
const float p_o16283_ty = 8.000000000;
const float p_o16283_overlap = 2.000000000;
const float p_o16283_scale_x = 0.160000000;
const float p_o16283_scale_y = 0.070000000;
const float p_o16283_fixed_offset = 0.000000000;
const float p_o16283_offset = 0.250000000;
const float p_o16283_rotate = 180.000000000;
const float p_o16283_scale = 0.420000000;
const float p_o16283_value = 0.460000000;
const float p_o16292_default_in1 = 0.000000000;
const float p_o16292_default_in2 = 0.660000000;
const float p_o16282_default_in1 = 0.000000000;
const float p_o16282_default_in2 = 0.000000000;
const float p_o16272_value = 0.140000000;
const float p_o16272_width = 0.270000000;
const float p_o16272_contrast = 0.000000000;
const float p_o16271_sides = 6.000000000;
const float p_o16271_radius = 0.850000000;
const float p_o16271_edge = 1.000000000;
const float p_o16281_default_in1 = 0.000000000;
const float p_o16281_default_in2 = 0.000000000;
const float p_o16279_cx = 0.000000000;
const float p_o16279_cy = 0.000000000;
const float p_o16278_translate_x = 0.145000000;
const float p_o16278_translate_y = 0.000000000;
const float p_o16277_offset = 0.280000000;
const float p_o16280_sides = 4.000000000;
const float p_o16280_radius = 0.090000000;
const float p_o16280_edge = 1.000000000;
const float p_o16276_cx = 0.000000000;
const float p_o16276_cy = 0.000000000;
const float p_o16275_translate_x = -0.055000000;
const float p_o16275_translate_y = 0.000000000;
const float p_o16274_offset = 0.110000000;
const float p_o16273_sides = 4.000000000;
const float p_o16273_radius = 0.100000000;
const float p_o16273_edge = 1.000000000;
float o16283_input_in(vec2 uv) {
float o16271_0_1_f = shape_circle((uv), p_o16271_sides, p_o16271_radius*1.0, p_o16271_edge*1.0);
float o16272_0_step = clamp((o16271_0_1_f - (p_o16272_value))/max(0.0001, p_o16272_width)+0.5, 0.0, 1.0);
float o16272_0_false = clamp((min(o16272_0_step, 1.0-o16272_0_step) * 2.0) / (1.0 - p_o16272_contrast), 0.0, 1.0);
float o16272_0_true = 1.0-o16272_0_false;float o16272_0_1_f = o16272_0_false;
float o16280_0_1_f = shape_polygon((uvmirror_h(((rotate((uv), vec2(0.5+p_o16279_cx, 0.5+p_o16279_cy), (elapsed_time*120.0)*0.01745329251))-vec2(p_o16278_translate_x, p_o16278_translate_y)), p_o16277_offset)), p_o16280_sides, p_o16280_radius*1.0, p_o16280_edge*1.0);
vec4 o16277_0_1_rgba = vec4(vec3(o16280_0_1_f), 1.0);
vec4 o16278_0_1_rgba = o16277_0_1_rgba;
vec4 o16279_0_1_rgba = o16278_0_1_rgba;
float o16273_0_1_f = shape_polygon((uvmirror_h(((rotate((uv), vec2(0.5+p_o16276_cx, 0.5+p_o16276_cy), (elapsed_time*10.0)*0.01745329251))-vec2(p_o16275_translate_x, p_o16275_translate_y)), p_o16274_offset)), p_o16273_sides, p_o16273_radius*1.0, p_o16273_edge*1.0);
vec4 o16274_0_1_rgba = vec4(vec3(o16273_0_1_f), 1.0);
vec4 o16275_0_1_rgba = o16274_0_1_rgba;
vec4 o16276_0_1_rgba = o16275_0_1_rgba;
float o16281_0_clamp_false = max((dot((o16279_0_1_rgba).rgb, vec3(1.0))/3.0),(dot((o16276_0_1_rgba).rgb, vec3(1.0))/3.0));
float o16281_0_clamp_true = clamp(o16281_0_clamp_false, 0.0, 1.0);
float o16281_0_1_f = o16281_0_clamp_false;
float o16282_0_clamp_false = max(o16272_0_1_f,o16281_0_1_f);
float o16282_0_clamp_true = clamp(o16282_0_clamp_false, 0.0, 1.0);
float o16282_0_1_f = o16282_0_clamp_false;
float o16292_0_clamp_false = o16282_0_1_f*p_o16292_default_in2;
float o16292_0_clamp_true = clamp(o16292_0_clamp_false, 0.0, 1.0);
float o16292_0_2_f = o16292_0_clamp_false;

return o16292_0_2_f;
}
float o16283_input_mask(vec2 uv) {

return 1.0;
}
vec4 tiler_o16283(vec2 uv, vec2 tile, int overlap, vec2 _seed) {
	float c = 0.0;
	vec3 rc = vec3(0.0);
	vec3 rc1;
	for (int dx = -overlap; dx <= overlap; ++dx) {
		for (int dy = -overlap; dy <= overlap; ++dy) {
			vec2 pos = fract((floor(uv*tile)+vec2(float(dx), float(dy))+vec2(0.5))/tile-vec2(0.5));
			vec2 seed = rand2(pos+_seed);
			rc1 = rand3(seed);
			pos = fract(pos+vec2(p_o16283_fixed_offset/tile.x, 0.0)*floor(mod(pos.y*tile.y, 2.0))+p_o16283_offset*seed/tile);
			float mask = o16283_input_mask(fract(pos+vec2(0.5)));
			if (mask > 0.01) {
				vec2 pv = fract(uv - pos)-vec2(0.5);
				seed = rand2(seed);
				float angle = (seed.x * 2.0 - 1.0) * p_o16283_rotate * 0.01745329251;
				float ca = cos(angle);
				float sa = sin(angle);
				pv = vec2(ca*pv.x+sa*pv.y, -sa*pv.x+ca*pv.y);
				pv *= (seed.y-0.5)*2.0*p_o16283_scale+1.0;
				pv /= vec2(p_o16283_scale_x, p_o16283_scale_y);
				pv += vec2(0.5);
				seed = rand2(seed);
				vec2 clamped_pv = clamp(pv, vec2(0.0), vec2(1.0));
				if (pv.x != clamped_pv.x || pv.y != clamped_pv.y) {
					continue;
				}
				 
				float c1 = o16283_input_in(pv)*mask*(1.0-p_o16283_value*seed.x);
				c = max(c, c1);
				rc = mix(rc, rc1, step(c, c1));
			}
		}
	}
	return vec4(rc, c);
}const float p_o16287_translate_x = -0.020000000;
const float p_o16287_translate_y = 0.020000000;
const float p_o16287_rotate = 0.000000000;
const float p_o16287_scale_x = 1.000000000;
const float p_o16287_scale_y = 1.000000000;
const float p_o16288_translate_x = -0.015000000;
const float p_o16288_translate_y = -0.015000000;
const float p_o16288_rotate = 0.000000000;
const float p_o16288_scale_x = 1.000000000;
const float p_o16288_scale_y = 1.000000000;



void fragment() {
float o16285_0_1_f = perlin((fract(transform2((scale((UV), vec2(0.5+p_o16290_cx, 0.5+p_o16290_cy), vec2(p_o16290_scale_x, (o16291_ratio)))), vec2((elapsed_time*0.1)*(2.0*1.0-1.0), p_o16286_translate_y*(2.0*1.0-1.0)), p_o16286_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o16286_scale_x*(2.0*1.0-1.0), p_o16286_scale_y*(2.0*1.0-1.0))))), vec2(p_o16285_scale_x, p_o16285_scale_y), int(p_o16285_iterations), p_o16285_persistence, seed_o16285);
vec4 o16286_0_1_rgba = vec4(vec3(o16285_0_1_f), 1.0);
vec4 o16283_0_rch = tiler_o16283((fract(transform2((scale((UV), vec2(0.5+p_o16290_cx, 0.5+p_o16290_cy), vec2(p_o16290_scale_x, (o16291_ratio)))), vec2(p_o16284_translate_x*(2.0*(dot((o16286_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), p_o16284_translate_y*(2.0*(dot((o16286_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0)), p_o16284_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o16284_scale_x*(2.0*1.0-1.0), p_o16284_scale_y*(2.0*1.0-1.0))))), vec2(p_o16283_tx, p_o16283_ty), int(p_o16283_overlap), vec2(float(seed_o16283)));float o16283_0_1_f = o16283_0_rch.a;
vec4 o16284_0_1_rgba = vec4(vec3(o16283_0_1_f), 1.0);
vec4 o16283_2_rch = tiler_o16283((fract(transform2((scale((UV), vec2(0.5+p_o16290_cx, 0.5+p_o16290_cy), vec2(p_o16290_scale_x, (o16291_ratio)))), vec2(p_o16287_translate_x*(2.0*(dot((o16286_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), p_o16287_translate_y*(2.0*(dot((o16286_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0)), p_o16287_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o16287_scale_x*(2.0*1.0-1.0), p_o16287_scale_y*(2.0*1.0-1.0))))), vec2(p_o16283_tx, p_o16283_ty), int(p_o16283_overlap), vec2(float(seed_o16283)));float o16283_0_3_f = o16283_2_rch.a;
vec4 o16287_0_1_rgba = vec4(vec3(o16283_0_3_f), 1.0);
vec4 o16283_4_rch = tiler_o16283((fract(transform2((scale((UV), vec2(0.5+p_o16290_cx, 0.5+p_o16290_cy), vec2(p_o16290_scale_x, (o16291_ratio)))), vec2(p_o16288_translate_x*(2.0*(dot((o16286_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), p_o16288_translate_y*(2.0*(dot((o16286_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0)), p_o16288_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o16288_scale_x*(2.0*1.0-1.0), p_o16288_scale_y*(2.0*1.0-1.0))))), vec2(p_o16283_tx, p_o16283_ty), int(p_o16283_overlap), vec2(float(seed_o16283)));float o16283_0_5_f = o16283_4_rch.a;
vec4 o16288_0_1_rgba = vec4(vec3(o16283_0_5_f), 1.0);
vec4 o16289_0_1_rgba = vec4((dot((o16284_0_1_rgba).rgb, vec3(1.0))/3.0), (dot((o16287_0_1_rgba).rgb, vec3(1.0))/3.0), (dot((o16288_0_1_rgba).rgb, vec3(1.0))/3.0), 1.0);
vec4 o16290_0_1_rgba = o16289_0_1_rgba;
COLOR = o16290_0_1_rgba;
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 6 )
shader_param/canvas_size = Vector2( 1280, 720 )

[sub_resource type="DynamicFont" id=1]
size = 72
font_data = ExtResource( 2 )

[sub_resource type="StyleBoxFlat" id=2]
bg_color = Color( 1, 1, 1, 1 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 0.380392, 0.388235, 0.486275, 1 )

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 0.380392, 0.388235, 0.486275, 1 )
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color( 0.380392, 0.388235, 0.486275, 1 )

[sub_resource type="StyleBoxFlat" id=4]
bg_color = Color( 0.0235294, 0.0313726, 0.12549, 0.929412 )
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color( 1, 0, 0, 1 )

[node name="Start" type="Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Effect" type="ColorRect" parent="."]
material = SubResource( 5 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchor_left = 0.5
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -221.0
margin_right = 221.0
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Space1" type="Control" parent="VBoxContainer"]
margin_bottom = 40.0
rect_min_size = Vector2( 0, 40 )
size_flags_horizontal = 0
size_flags_stretch_ratio = 2.0

[node name="Icon" type="TextureRect" parent="VBoxContainer"]
margin_left = 93.0
margin_top = 44.0
margin_right = 349.0
margin_bottom = 300.0
size_flags_horizontal = 4
texture = ExtResource( 4 )

[node name="Space2" type="Control" parent="VBoxContainer"]
margin_top = 304.0
margin_bottom = 344.0
rect_min_size = Vector2( 0, 40 )
size_flags_horizontal = 0
size_flags_stretch_ratio = 2.0

[node name="Title" type="Label" parent="VBoxContainer"]
margin_top = 348.0
margin_right = 442.0
margin_bottom = 435.0
custom_fonts/font = SubResource( 1 )
text = "Material Maker"
align = 1

[node name="Label" type="Label" parent="VBoxContainer"]
margin_top = 439.0
margin_right = 442.0
margin_bottom = 453.0
align = 1

[node name="ProgressBar" type="ProgressBar" parent="VBoxContainer"]
margin_left = 96.0
margin_top = 457.0
margin_right = 346.0
margin_bottom = 473.0
rect_min_size = Vector2( 250, 16 )
size_flags_horizontal = 4
custom_styles/fg = SubResource( 2 )
custom_styles/bg = SubResource( 3 )
value = 50.0
percent_visible = false

[node name="Space3" type="Control" parent="VBoxContainer"]
margin_top = 477.0
margin_bottom = 551.0
size_flags_horizontal = 0
size_flags_vertical = 3
size_flags_stretch_ratio = 0.75

[node name="Label2" type="Label" parent="VBoxContainer"]
margin_top = 555.0
margin_right = 442.0
margin_bottom = 569.0
text = "Powered by"
align = 1

[node name="TextureRect" type="TextureRect" parent="VBoxContainer"]
margin_left = 127.0
margin_top = 573.0
margin_right = 314.0
margin_bottom = 642.0
size_flags_horizontal = 4
texture = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Space4" type="Control" parent="VBoxContainer"]
margin_top = 646.0
margin_bottom = 720.0
size_flags_horizontal = 0
size_flags_vertical = 3
size_flags_stretch_ratio = 0.75

[node name="ErrorPanel" type="Panel" parent="."]
visible = false
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -268.5
margin_top = -76.0
margin_right = 268.5
margin_bottom = 76.0
rect_pivot_offset = Vector2( 267.976, 75.7381 )
custom_styles/panel = SubResource( 4 )

[node name="Label" type="Label" parent="ErrorPanel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 10.0
margin_right = -10.0
margin_bottom = -10.0
align = 1
valign = 1
