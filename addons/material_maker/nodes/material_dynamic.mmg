{
	"export": {

	},
	"export_paths": {

	},
	"name": "material_dynamic",
	"node_position": {
		"x": 0,
		"y": 0
	},
	"parameters": {
		"albedo_color": {
			"a": 1,
			"b": 1,
			"g": 1,
			"r": 1,
			"type": "Color"
		},
		"ao": 1,
		"depth_scale": 0.15,
		"emission_energy": 1.59,
		"flags_transparent": false,
		"metallic": 1,
		"normal": 1,
		"roughness": 1,
		"size": 11,
		"sss": 0
	},
	"shader_model": {
		"code": "",
		"global": "",
		"inputs": [
			{
				"default": "vec3(1.0)",
				"group_size": 7,
				"label": "",
				"name": "albedo_tex",
				"type": "rgb"
			},
			{
				"default": "1.0",
				"label": "",
				"name": "metallic_tex",
				"type": "f"
			},
			{
				"default": "1.0",
				"label": "",
				"name": "roughness_tex",
				"type": "f"
			},
			{
				"default": "vec3(0.0)",
				"label": "",
				"name": "emission_tex",
				"type": "rgb"
			},
			{
				"default": "vec3(0.5)",
				"label": "",
				"name": "normal_tex",
				"type": "rgb"
			},
			{
				"default": "1.0",
				"label": "",
				"name": "ao_tex",
				"type": "f"
			},
			{
				"default": "0.0",
				"function": true,
				"label": "",
				"name": "depth_tex",
				"type": "f"
			},
			{
				"default": "1.0",
				"label": "",
				"name": "opacity_tex",
				"type": "f"
			},
			{
				"default": "0.0",
				"label": "",
				"name": "sss_tex",
				"type": "f"
			}
		],
		"instance": "",
		"name": "Dynamic PBR Material",
		"outputs": [
			{
				"rgba": "vec4($albedo_tex($uv), $opacity_tex($uv))",
				"type": "rgba"
			},
			{
				"rgb": "vec3($ao_tex($uv), $roughness_tex($uv), $metallic_tex($uv))",
				"type": "rgb"
			},
			{
				"rgb": "$emission_tex($uv)",
				"type": "rgb"
			},
			{
				"rgb": "$normal_tex($uv)*vec3(-1.0, 1.0, 1.0)+vec3(1.0, 0.0, 0.0)",
				"type": "rgb"
			},
			{
				"f": "$depth_tex($uv)",
				"type": "f"
			},
			{
				"f": "$sss_tex($uv)",
				"type": "f"
			},
			{
				"rgba": "vec4(vec3($metallic_tex($uv)), 1.0-$roughness_tex($uv))",
				"type": "rgba"
			},
			{
				"rgb": "$normal_tex($uv)*vec3(-1.0, 1.0, -1.0)+vec3(1.0, 0.0, 1.0)",
				"type": "rgb"
			},
			{
				"f": "1.0-$depth_tex($uv)",
				"type": "f"
			},
			{
				"f": "$ao_tex($uv)",
				"type": "f"
			},
			{
				"rgb": "$normal_tex($uv)*vec3(-1.0)+vec3(1.0)",
				"type": "rgb"
			},
			{
				"rgba": "vec4($metallic_tex($uv), $ao_tex($uv), 1.0, 1.0-$roughness_tex($uv))",
				"type": "rgba"
			},
			{
				"f": "$metallic_tex($uv)",
				"type": "f"
			},
			{
				"f": "$roughness_tex($uv)",
				"type": "f"
			}
		],
		"parameters": [
			{
				"default": {
					"a": 1,
					"b": 1,
					"g": 1,
					"r": 1
				},
				"label": "Albedo",
				"name": "albedo_color",
				"type": "color"
			},
			{
				"control": "None",
				"default": 1,
				"label": "Metallic",
				"max": 1,
				"min": 0,
				"name": "metallic",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 1,
				"label": "Roughness",
				"max": 1,
				"min": 0,
				"name": "roughness",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 1,
				"label": "Emission",
				"max": 1,
				"min": 0,
				"name": "emission_energy",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 1,
				"label": "Normal",
				"max": 10,
				"min": 0,
				"name": "normal",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 1,
				"label": "Ambient occlusion",
				"max": 1,
				"min": 0,
				"name": "ao",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 0.5,
				"label": "Depth",
				"max": 1,
				"min": 0,
				"name": "depth_scale",
				"step": 0.01,
				"type": "float"
			},
			{
				"default": false,
				"label": "Transparency",
				"name": "flags_transparent",
				"type": "boolean"
			},
			{
				"control": "None",
				"default": 0,
				"label": "Subsurf. scatter.",
				"max": 1,
				"min": 0,
				"name": "sss",
				"step": 0.01,
				"type": "float"
			},
			{
				"default": 11,
				"first": 6,
				"label": "Size",
				"last": 13,
				"name": "size",
				"type": "size"
			}
		],
		"preview_shader": "shader_type spatial;\n\nuniform vec3 uv1_scale = vec3(1.0, 1.0, 1.0);\nuniform int depth_min_layers = 8;\nuniform int depth_max_layers = 16;\nuniform vec2 depth_flip = vec2(1.0);\n\nvarying float elapsed_time;\n\nvoid vertex() {\n\telapsed_time = TIME;\n}\n\n//---\n\nfloat rand(vec2 x) {\n    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);\n}\n\nvec2 rand2(vec2 x) {\n    return fract(cos(mod(vec2(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t      dot(x, vec2(3.4562, 17.398))), vec2(3.14))) * 43758.5453);\n}\n\nvec3 rand3(vec2 x) {\n    return fract(cos(mod(vec3(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t\t  dot(x, vec2(3.4562, 17.398)),\n                              dot(x, vec2(13.254, 5.867))), vec3(3.14))) * 43758.5453);\n}\n\nvec3 rgb2hsv(vec3 c) {\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n\tvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n$definitions\n\nvoid fragment() {\n\tvec2 uv = fract(UV*uv1_scale.xy);\n$begin_generate\n\t{\n\t\tvec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));\n\t\tfloat num_layers = mix(float(depth_max_layers),float(depth_min_layers), abs(dot(vec3(0.0, 0.0, 1.0), view_dir)));\n\t\tfloat layer_depth = 1.0 / num_layers;\n\t\tfloat current_layer_depth = 0.0;\n\t\tvec2 P = view_dir.xy * $depth_scale;\n\t\tvec2 delta = P / num_layers;\n\t\tvec2  ofs = uv;\n\t\tfloat depth = $depth_tex(ofs);\n\t\tfloat current_depth = 0.0;\n\t\twhile(current_depth < depth) {\n\t\t\tofs -= delta;\n\t\t\tdepth = $depth_tex(ofs);\n\t\t\tcurrent_depth += layer_depth;\n\t\t}\n\t\tvec2 prev_ofs = ofs + delta;\n\t\tfloat after_depth  = depth - current_depth;\n\t\tfloat before_depth = $depth_tex(ofs) - current_depth + layer_depth;\n\t\tfloat weight = after_depth / (after_depth - before_depth);\n\t\tofs = mix(ofs,prev_ofs,weight);\n\t\tuv = ofs;\n\t}\n$end_generate\n$begin_generate\n\tvec3 albedo_tex = $albedo_tex(uv).rgb;\n\talbedo_tex = mix(pow((albedo_tex + vec3(0.055)) * (1.0 / (1.0 + 0.055)),vec3(2.4)),albedo_tex * (1.0 / 12.92),lessThan(albedo_tex,vec3(0.04045)));\n\tALBEDO = albedo_tex*$albedo_color.rgb;\n\tMETALLIC = $metallic_tex(uv)*$metallic;\n\tROUGHNESS = $roughness_tex(uv)*$roughness;\n\tNORMALMAP = $normal_tex(uv);\n\tEMISSION = $emission_tex(uv)*$emission_energy;\n$end_generate\n\n}\n\n\n"
	},
	"type": "material_export"
}