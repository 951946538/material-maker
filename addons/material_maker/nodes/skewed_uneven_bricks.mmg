{
	"name": "skewed_uneven_bricks",
	"node_position": {
		"x": 0,
		"y": 0
	},
	"parameters": {
		"bevel": 0.1,
		"columns": 6,
		"corner": 0.3,
		"mortar": 0.1,
		"randomness": 1,
		"round": 0,
		"rows": 6
	},
	"seed": 0.00283,
	"seed_locked": false,
	"shader_model": {
		"code": "vec3 $(name_uv)_brick_uv;\nvec3 $(name_uv)_corner_uv;\nvec4 $(name_uv)_brick_fill;\nvec4 $(name_uv)_corner_fill;\nfloat $(name_uv)_bricks = skewed_uneve_bricks($uv, vec2($columns, $rows), $randomness, $mortar * $mortar_map($uv), $bevel * $bevel_map($uv), $round * $round_map($uv), $corner, $seed, $(name_uv)_brick_uv, $(name_uv)_corner_uv, $(name_uv)_brick_fill, $(name_uv)_corner_fill);",
		"global": "vec4 generate_rect(vec2 a, vec2 b, vec2 c, vec2 d) {\n\tvec2 start = min(min(a, b), min(c, d));\n\tvec2 end = max(max(a, b), max(c, d));\n\treturn vec4(start, end);\n}\n\nvec2 get_line_intersection(vec4 line1, vec4 line2) {\n\tvec2 a1 = line1.xy;\n\tvec2 b1 = line1.zw;\n\tvec2 a2 = line2.xy;\n\tvec2 b2 = line2.zw;\n\t\n\tfloat delta_x1 = b1.x - a1.x;\n\tfloat delta_x2 = b2.x - a2.x;\n\t\n\tfloat slope1 = delta_x1 != 0.0 ? (b1.y - a1.y) / delta_x1 : 100000.0;\n\tfloat slope2 = delta_x2 != 0.0 ? (b2.y - a2.y) / delta_x2 : 100000.0;\n\t\n\tfloat y_intercept1 = a1.y  - a1.x * slope1;\n\tfloat y_intercept2 = a2.y  - a2.x * slope2;\n\t\n\tfloat intersect_x = (y_intercept1 - y_intercept2) / (slope2 - slope1);\n\tfloat intersect_y = intersect_x * slope1 + y_intercept1;\n\t\n\treturn vec2(intersect_x, intersect_y);\n}\n\nfloat cross2d( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nvec2 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in vec2 d )\n{\n    vec2 res = vec2(-1.0);\n\n    vec2 e = b-a;\n    vec2 f = d-a;\n    vec2 g = a-b+c-d;\n    vec2 h = p-a;\n        \n    float k2 = cross2d( g, f );\n    float k1 = cross2d( e, f ) + cross2d( h, g );\n    float k0 = cross2d( h, e );\n    k2 /= k0; k1 /= k0; k0 = 1.0;\n    \n\t// if edges are parallel, this is a linear equation\n    if( abs(k2)<0.001 )\n    {\n        res = vec2( (h.x*k1+f.x*k0)/(e.x*k1-g.x*k0), -k0/k1 );\n    }\n    // otherwise, it's a quadratic\n\telse\n    {\n        float w = k1*k1 - 4.0*k0*k2;\n        if( w<0.0 ) return vec2(-1.0);\n        w = sqrt( w );\n\n        float ik2 = 0.5/k2;\n        float v = (-k1 - w)*ik2;\n        float u = (h.x - f.x*v)/(e.x + g.x*v);\n        \n        if( u<0.0 || u>1.0 || v<0.0 || v>1.0 )\n        {\n           v = (-k1 + w)*ik2;\n           u = (h.x - f.x*v)/(e.x + g.x*v);\n        }\n        res = vec2( u, v );\n    }\n    \n    return res;\n}\n\nbool point_left_of_line(vec4 line, vec2 c) {\n\tvec2 a = line.xy;\n\tvec2 b = line.zw;\n\treturn ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) > 0.0;\n}\n\nvec2 skewed_uneven_cut(vec2 x, float randomness) {\n\tvec2 value = x;\n\tvalue *= 4096.0;\n\tvalue = round(value);\n\tvalue /= 4096.0;\n\tvalue = 0.5 + (rand2(value) - 0.5) * randomness;\n\treturn value;\n}\n\nfloat skewed_uneve_bricks(vec2 uv, vec2 size, float randomness, float mortar, float bevel, float round, float corner, float seed, inout vec3 brick_uv, inout vec3 corner_uv, inout vec4 brick_fill, inout vec4 corner_fill) {\n\t//Aalgorithm messes up at randomness 0.0\n\trandomness = abs(randomness) < 0.01 ? 0.01 : randomness;\n\t\n\tvec2 scaled_uv = uv * size;\n\t\n\tvec2 cell_id = floor(scaled_uv);\n\tvec2 cell_uv = fract(scaled_uv);\n\t\n\t// Instead of creaing one value for each tile, we create two that we can use for a line\n\t// to cut with.\n\t// Two random values for each cell\n\tvec2 current = skewed_uneven_cut(cell_id + seed, randomness);\n\tvec2 top = skewed_uneven_cut( mod( cell_id + vec2(0.0, -1.0), size) + seed, randomness);\n\tvec2 top_right = skewed_uneven_cut( mod( cell_id + vec2(1.0, -1.0) + seed, size), randomness);\n\tvec2 right = skewed_uneven_cut( mod( cell_id + vec2(1.0, 0.0), size) + seed, randomness);\n\tvec2 bottom_right = skewed_uneven_cut( mod( cell_id + vec2(1.0, 1.0) + seed, size), randomness);\n\tvec2 bottom = skewed_uneven_cut( mod( cell_id + vec2(0.0, 1.0), size) + seed, randomness);\n\tvec2 bottom_left = skewed_uneven_cut( mod( cell_id + vec2(-1.0, 1.0) + seed, size), randomness);\n\tvec2 left = skewed_uneven_cut( mod( cell_id + vec2(-1.0, 0.0), size) + seed, randomness);\n\tvec2 top_left = skewed_uneven_cut( mod( cell_id + vec2(-1.0, -1.0) + seed, size), randomness);\n\n\tvec3 color = vec3(0.0);\n\t\n\t//vec2 point = vec2(-0.5);\n\tvec2 a, b, c, d;\n\tvec4 rect;\n\t\n\t\t// Horizontal\n\tif (mod(cell_id.x + cell_id.y, 2.0) > 0.5) {\t\t\n\t\t// The nine lines for horizontal cuts\n\t\tvec4 current_line = (cell_id.xyxy + vec4(vec2(-1.0, current.x), vec2(2.0, current.y))) / size.xyxy;\n\t\tvec4 top_line = (cell_id.xyxy + vec4(vec2(top.x, -2.0), vec2(top.y, 1.0))) / size.xyxy;\n\t\tvec4 top_right_line = (cell_id.xyxy + vec4(vec2(0.0, -1.0 + top_right.x), vec2(3.0, -1.0 + top_right.y))) / size.xyxy;\n\t\tvec4 right_line = (cell_id.xyxy + vec4(vec2(1.0 + right.x, -1.0), vec2(1.0 + right.y, 2.0))) / size.xyxy;\n\t\tvec4 bottom_right_line = (cell_id.xyxy + vec4(vec2(0.0, 1.0 + bottom_right.x), vec2(3.0, 1.0 + bottom_right.y))) / size.xyxy;\n\t\tvec4 bottom_line = (cell_id.xyxy + vec4(vec2(bottom.x, 0.0), vec2(bottom.y, 3.0))) / size.xyxy;\n\t\tvec4 bottom_left_line = (cell_id.xyxy + vec4(vec2(-2.0, 1.0 + bottom_left.x), vec2(1.0, 1.0 + bottom_left.y))) / size.xyxy;\n\t\tvec4 left_line = (cell_id.xyxy + vec4( vec2(-1.0 + left.x, -1.0), vec2(-1.0 + left.y, 2.0))) / size.xyxy;\n\t\tvec4 top_left_line = (cell_id.xyxy + vec4(vec2(-2.0, -1.0 + top_left.x), vec2(1.0, -1.0 + top_left.y))) / size.xyxy;\n\t\t\n\t\t// if above h cut\n\t\t\n\t\tif (!point_left_of_line(current_line, uv)) {\n\t\t\t// if left of v cut\n\t\t\tif (point_left_of_line(top_line, uv)) {\n\t\t\t\ta = get_line_intersection(top_left_line, left_line);\n\t\t\t\tb = get_line_intersection(top_line, top_left_line);\n\t\t\t\tc = get_line_intersection(current_line, top_line);\n\t\t\t\td = get_line_intersection(current_line, left_line);\n\t\t\t\tcolor = vec3(1.0, 0.0, 0.0);\n\t\t\t} else {\n\t\t\t\ta = get_line_intersection(top_right_line, top_line);\n\t\t\t\tb = get_line_intersection(right_line, top_right_line);\n\t\t\t\tc = get_line_intersection(current_line, right_line);\n\t\t\t\td = get_line_intersection(current_line, top_line);\n\t\t\t\t\n\t\t\t\tcolor = vec3(0.0, 1.0, 0.0);\n\t\t\t}\n\t\t} else {\n\t\t\t// if right of v cut\n\t\t\tif (!point_left_of_line(bottom_line, uv)) {\n\t\t\t\ta = get_line_intersection(current_line, bottom_line);\n\t\t\t\tb = get_line_intersection(current_line, right_line);\n\t\t\t\tc = get_line_intersection(bottom_right_line, right_line);\n\t\t\t\td = get_line_intersection(bottom_right_line, bottom_line);\n\t\t\t\t\n\t\t\t\tcolor = vec3(0.0, 0.0, 1.0);\n\t\t\t} else {\n\t\t\t\ta = get_line_intersection(left_line, current_line);\n\t\t\t\tb = get_line_intersection(bottom_line, current_line);\n\t\t\t\tc = get_line_intersection(bottom_line, bottom_left_line);\n\t\t\t\td = get_line_intersection(left_line, bottom_left_line);\n\t\t\t\t\n\t\t\t\tcolor = vec3(1.0, 1.0, 0.0);\n\t\t\t}\n\t\t}\n\t\tbrick_uv.xy = (invBilinear(uv, a, b, c, d));\n\t\trect = generate_rect(a, b, c, d);\n\t// Vertical\n\t} else { \n\t\t// The nine lines for horizontal cuts\n\t\tvec4 current_line = (cell_id.xyxy + vec4(vec2(current.x, -1.0), vec2(current.y, 2.0))) / size.xyxy;\n\t\tvec4 top_line = (cell_id.xyxy + vec4(vec2(-1.0, -1.0 + top.x), vec2(2.0, -1.0 + top.y))) / size.xyxy;\n\t\tvec4 top_right_line = (cell_id.xyxy + vec4(vec2(1.0 + top_right.x, -2.0), vec2(1.0 + top_right.y, 1.0))) / size.xyxy;\n\t\tvec4 right_line = (cell_id.xyxy + vec4(vec2(0.0, right.x), vec2(3.0, right.y))) / size.xyxy;\n\t\tvec4 bottom_right_line = (cell_id.xyxy + vec4(vec2(1.0 + bottom_right.x, 0.0), vec2(1.0 + bottom_right.y, 3.0))) / size.xyxy;\n\t\tvec4 bottom_line = (cell_id.xyxy + vec4(vec2(-1.0, 1.0 + bottom.x), vec2(2.0, 1.0 + bottom.y))) / size.xyxy;\n\t\tvec4 bottom_left_line = (cell_id.xyxy + vec4(vec2(-1.0 + bottom_left.x, 0.0), vec2(-1.0 + bottom_left.y, 3.0))) / size.xyxy;\n\t\tvec4 left_line = (cell_id.xyxy + vec4( vec2(-2.0, left.x), vec2(1.0, left.y))) / size.xyxy;\n\t\tvec4 top_left_line = (cell_id.xyxy + vec4(vec2(-1.0 + top_left.x, -2.0), vec2(-1.0 + top_left.y, 1.0))) / size.xyxy;\n\t\t\n\t\t// if left of v cut\n\t\tif (point_left_of_line(current_line, uv)) {\n\t\t\t// if above h cut\n\t\t\tif (!point_left_of_line(left_line, uv)) {\n\t\t\t\ta = get_line_intersection(top_left_line, top_line);\n\t\t\t\tb = get_line_intersection(current_line, top_line);\n\t\t\t\tc = get_line_intersection(current_line, left_line);\n\t\t\t\td = get_line_intersection(top_left_line, left_line);\n\t\t\t\t\n\t\t\t\tcolor = vec3(1.0, 0.0, 1.0);\n\t\t\t} else {\n\t\t\t\ta = get_line_intersection(bottom_left_line, left_line);\n\t\t\t\tb = get_line_intersection(current_line, left_line);\n\t\t\t\tc = get_line_intersection(current_line, bottom_line);\n\t\t\t\td = get_line_intersection(bottom_left_line, bottom_line);\n\t\t\t\t\n\t\t\t\tcolor = vec3(1.0, 0.5, 0.0);\n\t\t\t}\n\t\t} else {\n\t\t\t// if above h cut\n\t\t\tif (!point_left_of_line(right_line, uv)) {\n\t\t\t\ta = get_line_intersection(current_line, top_line);\n\t\t\t\tb = get_line_intersection(top_right_line, top_line);\n\t\t\t\tc = get_line_intersection(top_right_line, right_line);\n\t\t\t\td = get_line_intersection(current_line, right_line);\n\t\t\t\t\n\t\t\t\tcolor = vec3(0.0, 1.0, 1.0);\n\t\t\t} else {\n\t\t\t\ta = get_line_intersection(current_line, right_line);\n\t\t\t\tb = get_line_intersection(bottom_right_line, right_line);\n\t\t\t\tc = get_line_intersection(bottom_right_line, bottom_line);\n\t\t\t\td = get_line_intersection(current_line, bottom_line);\n\t\t\t\t\n\t\t\t\tcolor = vec3(0.5, 1.0, 0.0);\n\t\t\t}\n\t\t}\n\t\tbrick_uv.xy = (invBilinear(uv, a, b, c, d));\n\t\trect = generate_rect(a, b, c, d);\n\t}\n\t\n\tbrick_fill = vec4(fract(rect.xy), rect.zw - rect.xy);\n\n\tbrick_fill *= 4096.0;\n\tbrick_fill = round(brick_fill);\n\tbrick_fill /= 4096.0;\n\t\n\tbrick_uv.z = rand(brick_fill.xy);\n\t\n\tcorner_uv.xy = brick_fill.zw * 2.0 / corner * (1.0 - (2.0 * abs(brick_uv.xy - 0.5)));\n\tcorner_uv.x = brick_uv.x < 0.5 ? corner_uv.x : 1.0 - corner_uv.x;\n\tcorner_uv.y = brick_uv.y < 0.5 ? corner_uv.y : 1.0 - corner_uv.y;\n\tcorner_uv.z = rand( floor(brick_uv.xy * 2.0) + brick_fill.xy );\n\t// Calculate corner bb\n\tfloat half_corner_size = 1.0 / max(size.x, size.y) * corner * 0.5;\n\tvec2 top_centers = brick_uv.x < 0.5 ? a + (normalize(d - a) + normalize(b - a)) * half_corner_size : b + (normalize(c - b) + normalize(a - b)) * half_corner_size; \n\tvec2 bottom_centers = brick_uv.x < 0.5 ? d + (normalize(a - d) + normalize(c - d)) * half_corner_size : c + (normalize(b - c) + normalize(d - c)) * half_corner_size; \n\tcorner_fill.xy = brick_uv.y < 0.5 ? top_centers : bottom_centers;\n\tcorner_fill.xy -= half_corner_size;\n\tcorner_fill.zw = vec2(half_corner_size * 2.0);\n\tcorner_fill = fract(corner_fill);\n\tcorner_fill *= 4096.0;\n\tcorner_fill = round(corner_fill);\n\tcorner_fill /= 4096.0;\n\n\t// Render the bricks\n\tbevel /= max(size.x, size.y) / 2.0;\n\tmortar /= max(size.x, size.y) / 2.0;\n    float brick;\n\tvec2 dist = (min(brick_uv.xy, 1.0 - brick_uv.xy) * -2.0);\n\tdist *=  brick_fill.zw;\n\tdist += vec2(round+mortar);\n    brick = length(max(dist, vec2(0))) + min(max(dist.x, dist.y), 0.0) - round;\n\tbrick = clamp(-brick/bevel, 0.0, 1.0);\n\t\n\treturn brick;\n}",
		"inputs": [
			{
				"default": "1.0",
				"label": "4:",
				"longdesc": "A map that affects the Mortar parameter",
				"name": "mortar_map",
				"shortdesc": "Mortar Map",
				"type": "f"
			},
			{
				"default": "1.0",
				"label": "",
				"longdesc": "A map that affects the Bevel parameter",
				"name": "bevel_map",
				"shortdesc": "Bevel Map",
				"type": "f"
			},
			{
				"default": "1.0",
				"label": "",
				"longdesc": "A map that affects the Round parameter",
				"name": "round_map",
				"shortdesc": "Round Map",
				"type": "f"
			}
		],
		"instance": "",
		"longdesc": "Generates an uneven bricks pattern with randomly skewed cuts",
		"name": "Skewed Uneven Bricks",
		"outputs": [
			{
				"f": "$(name_uv)_bricks",
				"longdesc": "A greyscale image that shows the bricks pattern",
				"shortdesc": "Bricks Pattern",
				"type": "f"
			},
			{
				"longdesc": "A UV layout that exactly matches the skewed brick, use this output with the Custom UV node.",
				"rgb": "$(name_uv)_brick_uv",
				"shortdesc": "Skewed Bricks UV",
				"type": "rgb"
			},
			{
				"longdesc": "A UV layout that exactly matches the skewed brick's corners, use this output with the Custom UV node. For a perfectly square corner uv, use the Corner Fill output and Fill to UV node.",
				"rgb": "$(name_uv)_corner_uv",
				"shortdesc": "Skewed Corner UV",
				"type": "rgb"
			},
			{
				"fill": "$(name_uv)_brick_fill",
				"longdesc": "An output that should be plugged into a Fill companion node",
				"shortdesc": "Brick Fill",
				"type": "fill"
			},
			{
				"fill": "$(name_uv)_corner_fill",
				"longdesc": "An output that should be plugged into a Fill companion node",
				"shortdesc": "Corner Fill",
				"type": "fill"
			}
		],
		"parameters": [
			{
				"control": "None",
				"default": 6,
				"label": "Rows",
				"longdesc": "The number of rows of a pattern",
				"max": 64,
				"min": 0,
				"name": "rows",
				"shortdesc": "Rows",
				"step": 2,
				"type": "float"
			},
			{
				"control": "None",
				"default": 6,
				"label": "Columns",
				"longdesc": "The number of columns of a pattern",
				"max": 64,
				"min": 0,
				"name": "columns",
				"shortdesc": "Columns",
				"step": 2,
				"type": "float"
			},
			{
				"control": "None",
				"default": 1,
				"label": "Randomness",
				"longdesc": "The randomness of the pattern",
				"max": 1,
				"min": 0,
				"name": "randomness",
				"shortdesc": "Randomness",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 0.1,
				"label": "Mortar",
				"longdesc": "The width of the space between bricks",
				"max": 1,
				"min": 0,
				"name": "mortar",
				"shortdesc": "Mortar",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 0.1,
				"label": "Bevel",
				"longdesc": "The width of the edge of each brick",
				"max": 0.5,
				"min": 0,
				"name": "bevel",
				"shortdesc": "Bevel",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 0,
				"label": "Round",
				"longdesc": "The radius of the round corners of bricks",
				"max": 1,
				"min": 0,
				"name": "round",
				"shortdesc": "Round",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 0.3,
				"label": "Corner",
				"longdesc": "The size of the corner part of each brick (only used to calculate the Corner UV  and Corner Fill outputs)",
				"max": 1,
				"min": 0,
				"name": "corner",
				"shortdesc": "Corner",
				"step": 0.01,
				"type": "float"
			}
		],
		"shortdesc": "Skewed Uneven Bricks"
	},
	"type": "shader"
}